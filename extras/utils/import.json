{
    "functions": {
        "print": {
            "returns": "void",
            "args": "text:String",
            "documentation": "Prints to console."
        },
        "makeSprite": {
            "returns": "void",
            "args": "tag:String, ?image:String, ?x:Float = 0, ?y:Float = 0",
            "documentation": "Spawns a Sprite with no animations using the tag `tag`, it will be using the image `image`.png, and will be spawned on position `x`, `y` If you want to make a Black screen with no texture, leave `image` field empty and use [makeGraphic](https://github.com/NAEL2XD/LuApps/wiki/All-LUA-APIs.-(Functions,-Variables-and-Events.)#makegraphicobjstring-widthint--256-heightint--256-colorstring--ffffff)\n\nIf another Sprite that exists is already using the tag `tag`, it will be removed."
        },
        "addSprite": {
            "returns": "void",
            "args": "tag:String, front:Bool = false",
            "documentation": "Adds a Sprite with the specified tag, either in front or behind the characters."
        },
        "removeSprite": {
            "returns": "void",
            "args": "tag:String",
            "documentation": "Removes Sprite with the specified tag\n* `tag` - The Sprite's tag"
        },
        "makeText": {
            "returns": "void",
            "args": "tag:String, text:String, width:Int, x:Float, y:Float",
            "documentation": "Creates Text object on position `x`, `y` and a width with 'width'"
        },
        "addText": {
            "returns": "void",
            "args": "tag:String",
            "documentation": "Spawns Text on the stage"
        },
        "removeText": {
            "returns": "void",
            "args": "tag:String, destroy:Bool = true",
            "documentation": "Removes Text with the specified tag\n* `tag` - The Sprite's tag"
        },
        "setTextString": {
            "returns": "void",
            "args": "tag:String, text:String",
            "documentation": "Sets text string at the specified tag"
        },
        "setTextSize": {
            "returns": "void",
            "args": "tag:String, size:Int",
            "documentation": "Sets text size at the specified tag"
        },
        "setTextBorder": {
            "returns": "void",
            "args": "tag:String, size:Int, color:String",
            "documentation": "Sets text border at the specified tag"
        },
        "setTextBorderStyle": {
            "returns": "void",
            "args": "tag:String, style:String, hexColor:String, ?size:Float = 1, ?quality:Float = 1",
            "documentation": "Sets the text's border into a very special style.\n\n* `tag` - The text's tag.\n* `style` - What style do you wanna use? Available options: `shadow`, `outline`, `outlinefast`. default is `none`\n* `hexcolor` - Ditto, what hex do you wanna use.\n* `size` - Size of the border, will be 1 if default.\n* `quality` - The quality of the border, will likely lag if it's too high."
        },
        "setTextColor": {
            "returns": "void",
            "args": "tag:String, color:String",
            "documentation": "Sets text color at the specified tag"
        },
        "setTextFont": {
            "returns": "void",
            "args": "tag:String, font:String",
            "documentation": "Sets text font at the specified tag"
        },
        "setTextAlignment": {
            "returns": "void",
            "args": "tag:String, alignment:String = 'left'",
            "documentation": "Sets text alignment at the specified tag `'left'`,`'right'`, or `'center'`"
        },
        "playMusic": {
            "returns": "void",
            "args": "music:String, ?volume:Float = 1, ?loop:Bool = false",
            "documentation": "* `music` - File name (Should be located in `mods/modName/music/`)\n* `volume` - Optional value, volume percent goes from `0` to `1`. Default value: `1`\n* `volume` - Optional value, if the music should loop indefinitely. Default value: `false`"
        },
        "setWindowSize": {
            "returns": "void",
            "args": "?width:Int = 1280, ?height:Int = 720",
            "documentation": "Sets the window size for you\n* `width` - Width by pixels\n* `height` - Height by pixels"
        },
        "setProperty": {
            "returns": "void",
            "args": "variable:String, value:Dynamic",
            "documentation": "Works in the same way as `getProperty()`, but it sets a new value for the variable.\n\nAlso returns the new value of the variable.\n\nExample: To move a sprite's `x` variable, use `setProperty('sprite.x', 50)`"
        },
        "getProperty": {
            "returns": "?",
            "args": "variable:String",
            "documentation": "Returns a current variable from Dummy's state.\n\nIt can also be used to get the variable from an object that is inside Dummy or a Sprite.\n\nExample: If you wanted to get the current sprite's `x` value, you should use `getProperty('sprite.x') -> 50`"
        },
        "keyJustPressed": {
            "returns": "boolean",
            "args": "?key:String",
            "documentation": "Checks if specific keyboard key was pressed on that frame, will be false if the frame passes.\n\n[List of Keys](https://api.haxeflixel.com/flixel/input/keyboard/FlxKeyList.html)"
        },
        "keyPressed": {
            "returns": "boolean",
            "args": "?key:String",
            "documentation": "Checks if specific keyboard key was pressed on any frame.\n\n[List of Keys](https://api.haxeflixel.com/flixel/input/keyboard/FlxKeyList.html)"
        },
        "mouseClicked": {
            "returns": "boolean",
            "args": "?key:String",
            "documentation": "Get if the mouse button `key` just got pressed on the current frame. leave 'name' blank for left mouse\n\nButtons: `'left'`, `'right'`, `'middle'`, `'any'`"
        },
        "mousePressed": {
            "returns": "boolean",
            "args": "?key:String",
            "documentation": "Get if the mouse button `key` is being held on the current frame.\n\nButtons: `'left'`, `'right'`, `'middle'`, `'any'`"
        },
        "setBlend": {
            "returns": "void",
            "args": "obj:String, blend:String = ''",
            "documentation": "Changes the blend mode of a Sprite (Works similar to how Photoshop do it)\n* `obj` - Sprite tag or Object variable name\n* `blend` - Blend mode to use. Example: `add`, `darken`, `normal`.\n\n[Lists of blend modes.](https://api.haxe.org/flash/display/BlendMode.html)"
        },
        "doTweenX": {
            "returns": "void",
            "args": "tag:String, vars:String, value:Dynamic, duration:Float, ease:String",
            "documentation": "Do a Tween on an object's X value\n\n**Calling this function will cancel another tween that is using the same tag!**\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `vars` - Variable to tween, example: `sprite` for tweening sprite's X position, `sprite.scale` for tweening sprite's Scale X\n* `value` - Target value on the tween end\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note i've added up here\n\nExample: To do a tween to sprite's Scale X, you should use `doTweenX('tween', 'sprite.scale', 1.5, 1, 'elasticInOut')`, when the tween ends, it will do a callback for `onTweenCompleted('tween')`\n[Lists of tween that can be done.](https://api.haxeflixel.com/flixel/tweens/FlxEase.html)"
        },
        "doTweenY": {
            "returns": "void",
            "args": "tag:String, vars:String, value:Dynamic, duration:Float, ease:String",
            "documentation": "Do a Tween on an object's Y value\n\n**Calling this function will cancel another tween that is using the same tag!**\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `vars` - Variable to tween, example: `sprite` for tweening sprite's X position, `sprite.scale` for tweening sprite's Scale X\n* `value` - Target value on the tween end\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note i've added up here\n\nExample: To do a tween to sprite's Scale X, you should use `doTweenX('tween', 'sprite.scale', 1.5, 1, 'elasticInOut')`, when the tween ends, it will do a callback for `onTweenCompleted('tween')`\n[Lists of tween that can be done.](https://api.haxeflixel.com/flixel/tweens/FlxEase.html)"
        },
        "doTweenAngle": {
            "returns": "void",
            "args": "tag:String, vars:String, value:Dynamic, duration:Float, ease:String",
            "documentation": "Do a Tween on an object's Angle value\n\n**Calling this function will cancel another tween that is using the same tag!**\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `vars` - Variable to tween, example: `sprite` for tweening sprite's X position, `sprite.scale` for tweening sprite's Scale X\n* `value` - Target value on the tween end\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note i've added up here\n\nExample: To do a tween to sprite's Scale X, you should use `doTweenX('tween', 'sprite.scale', 1.5, 1, 'elasticInOut')`, when the tween ends, it will do a callback for `onTweenCompleted('tween')`\n[Lists of tween that can be done.](https://api.haxeflixel.com/flixel/tweens/FlxEase.html)"
        },
        "doTweenAlpha": {
            "returns": "void",
            "args": "tag:String, vars:String, value:Dynamic, duration:Float, ease:String",
            "documentation": "Do a Tween on an object's Alpha value\n\n**Calling this function will cancel another tween that is using the same tag!**\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `vars` - Variable to tween, example: `sprite` for tweening sprite's X position, `sprite.scale` for tweening sprite's Scale X\n* `value` - Target value on the tween end\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note i've added up here\n\nExample: To do a tween to sprite's Scale X, you should use `doTweenX('tween', 'sprite.scale', 1.5, 1, 'elasticInOut')`, when the tween ends, it will do a callback for `onTweenCompleted('tween')`\n[Lists of tween that can be done.](https://api.haxeflixel.com/flixel/tweens/FlxEase.html)"
        },
        "doTweenColor": {
            "returns": "void",
            "args": "tag:String, vars:String, targetColor:String, duration:Float, ease:String",
            "documentation": "Do a Tween on an object's color\n\n**Calling this function will cancel another tween that is using the same tag!**\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `vars` - Variable to tween, example: `sprite` for tweening sprite's X position, `sprite.scale` for tweening sprite's Scale X\n* `targetColor` - The color the object will have when the tween ends (Must be in hexadecimal!)\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note i've added up here\n\nExample: To tween sprite's color to Red, you should use `doTweenColor('tween', 'sprite', 'FF0000', 1, 'linear')`, when the tween ends, it will do a callback for `onTweenCompleted('tween')`\n[Lists of tween that can be done.](https://api.haxeflixel.com/flixel/tweens/FlxEase.html)"
        },
        "setMouseVisibility": {
            "returns": "void",
            "args": "?show:Bool = true",
            "documentation": "Sets the visibility for the cursor.\n* `show` - Whatever or not you want to show the cursor icon."
        },
        "playSound": {
            "returns": "void",
            "args": "sound:String",
            "documentation": "Plays sound from mods/raw/sounds.\n* `sound` - Name of the file to play."
        },
        "moveTowardsMouse": {
            "returns": "void",
            "args": "tag:String, speed:Int = 60",
            "documentation": "Moves the sprite to the mouse's `x` and `y` position.\n\n* `tag` - The sprite tag.\n* `speed` - What speed do you wanna use? Defaults to 60 if empty."
        },
        "sendPopup": {
            "returns": "void",
            "args": "?title:String = \"\", desc:String = \"\"",
            "documentation": "Sends a window popup from the engine.\n\n* `title` - Title for your window popup, leave empty for `modName`. \n* `desc` - Description for your window popup, will be an error if nothing is set."
        },
        "randomInt": {
            "returns": "number",
            "args": "?min:Int = 1, ?max:Int = 10",
            "documentation": "Gets min and max, randomizes the integer and returns the result.\n\n* `min` - Minimum for the integer. Default is 1.\n* `max` - Maximum for the integer. Default is 10."
        },
        "randomFloat": {
            "returns": "number",
            "args": "?min:Int = 0, ?max:Int = 1",
            "documentation": "Same as `randomInt` but it's returning a random float.\n\n* `min` - Minimum for the float. Default is 0.\n* `max` - Maximum for the float. Default is 1."
        },
        "randomBool": {
            "returns": "boolean",
            "args": "?chance:Float = 50",
            "documentation": "Returns `true` or `false` depending on how high your chance is and how large the number is.\n\n* `chance` -  How low or high you want the chances, can be 0 - 100. Default is 50."
        },
        "cleanMemory": {
            "returns": "void",
            "args": "",
            "documentation": "Uses garbage collect to clean memory.\n\n***WARNING:***\nDoing this multiple amount of times can cause lag spikes, so be careful and do not make it trigger every frame!\nYou should put it on `create` function."
        },
        "makeGraphic": {
            "returns": "void",
            "args": "obj:String, ?width:Int = 256, ?height:Int = 256, ?color:String = \"FFFFFF\"",
            "documentation": "Used for making an object use a solid color Width x Height frame instead of a texture.\n* `obj` - Lua Sprite tag or Object variable name\n* `width` - Width in pixels of the graphic you want to create\n* `height` - Height in pixels of the graphic you want to create\n* `color` - Color string, works the same as `getColorFromHex()`\n\nExample: Use `makeGraphic('testBlackSquare', 1000, 1000, '000000')` to make the Lua Sprite with the tag \"testBlackSquare\" turn into a 1000x1000 black square."
        },
        "screenCenter": {
            "returns": "void",
            "args": "obj:String, ?pos:String = 'xy'",
            "documentation": "Centers a object on screen"
        },
        "stringEndsWith": {
            "returns": "boolean",
            "args": "str:String, end:String",
            "documentation": "Checks if `str` ends with `end`"
        },
        "stringSplit": {
            "returns": "array",
            "args": "str:String, split:String",
            "documentation": "Splits string with `split` delimeter to array of strings"
        },
        "stringStartsWith": {
            "returns": "boolean",
            "args": "str:String, start:String",
            "documentation": "Checks if `str` starts with `start`"
        },
        "stringTrim": {
            "returns": "string",
            "args": "str:String",
            "documentation": "Removes empty characters from the beginning and end of `string`"
        },
        "scaleObject": {
            "returns": "void",
            "args": "obj:String, x:Float, y:Float",
            "documentation": "Scales an object/tag with the listed arguments\n* `obj` - Your sprite/text tag.\n* `x` - Scale to X, Set to 1 for default.\n* `y` - Scale to Y, Set to 1 for default."
        },
        "runTimer": {
            "returns": "void",
            "args": "tag:String, time:Float = 1, loops:Int = 1",
            "documentation": "Runs a timer with a determined duration and loops count.\n\n**Calling this function will cancel another timer that is using the same tag!**\n* `tag` - Once the timer is finished, it will do a callback of `timerCompleted(tag, loops, loopsLeft)`\n* `time` - Optional value, how much time it takes to finish a loop. Default value is `1`\n* `loops` - Optional value, how much loops should it do, if it's set to `0`, it will repeat indefinitely. Default value is `1`"
        },
        "cancelTimer": {
            "returns": "void",
            "args": "tag:String",
            "documentation": "Cancels a timer using the tag `tag`, if there even is one."
        },
        "cancelTween": {
            "returns": "void",
            "args": "tag:String",
            "documentation": "Cancels a tween using the tag `tag`, if there even is one."
        },
        "getContent": {
            "returns": "string",
            "args": "file:String = ''",
            "documentation": "Gets the file, reads it and returns the String.\n\n**Make sure the file exists, if it doesn't then warning is thrown.**\n\n`file` - File path inside `mods/raw/assets/data`"
        },
        "getColorFromFlx": {
            "returns": "FlxColor",
            "args": "color:String = ''",
            "documentation": "Gets the color from FlxColor and returns it's color value.\n\n* `color` - The color you want to use.\n\n**If `color` is empty, it will use the `WHITE` color.**\n\n[Lists of FlxColor that can be used](https://api.haxeflixel.com/flixel/util/FlxColor.html)"
        },
        "setWindowName": {
            "returns": "void",
            "args": "name:String = \"LuApps\"",
            "documentation": "Sets the window name next to the icon.\n\n* `name` - The name of the window you want to set, defaults to `LuApps`."
        }
    },
    "variables": {
        "author": {
            "returns": "string",
            "documentation": "The current author that made the mod."
        },
        "fullscreen": {
            "returns": "boolean",
            "documentation": "Whatever or not if the fullscreen is used or not."
        },
        "height": {
            "returns": "number",
            "documentation": "Gets the height of the window."
        },
        "mouseMoved": {
            "returns": "boolean",
            "documentation": "Checks if the mouse is moved or not."
        },
        "mouseX": {
            "returns": "number",
            "documentation": "Gets the mouse's `x` position."
        },
        "mouseY": {
            "returns": "number",
            "documentation": "Gets the mouse's `y` position."
        },
        "width": {
            "returns": "number",
            "documentation": "Gets the width of the window."
        },
        "fps": {
            "returns": "number",
            "documentation": "Fetches the FPS that it's using."
        },
        "modName": {
            "returns": "string",
            "documentation": "The name of the mod launched from PlayState."
        },
        "modRaw": {
            "returns": "string",
            "documentation": "The path of the mod next to the engine that it's running."
        },
        "time": {
            "returns": "number",
            "documentation": "Sees how long has it ran for."
        },
        "osName": {
            "returns": "string",
            "documentation": "Gets the running Operating System's Name.\n\nAn example would be if you're running '**Generic PnP Monitor**'."
        }
    },
    "events": {
        "create": {
            "returns": "void",
            "args": "",
            "documentation": "Function called when script is loaded."
        },
        "update": {
            "returns": "void",
            "args": "elapsed:Float",
            "documentation": "Function called when script moves 1 frame."
        },
        "tweenComplete": {
            "returns": "string",
            "args": "tag:String",
            "documentation": "Function called when a tween is completed."
        }
    }
}